#define TEMP_ENT_LIFE		5

//Projectile trail and explosion effects
typedef enum
{
	 FX_REMOVE = 0,
	 FX_PLAYER_GIB_NORMAL,
	 FX_PLAYER_GIB_FROZEN_DETONATE,
	 FX_PLAYER_GIB_VAPOURIZE,
	 FX_PLAYER_GIB_ACID_BLAST,
	 FX_PLAYER_GIB_MELT,
	 FX_PLAYER_GIB_RADIATION,
	 FX_PLAYER_GIB_BLAST,
	 FX_PLAYER_GIB_BURN,
	 FX_PLAYER_GIB_SONIC,
	 FX_PLAYER_GIB_ENERGYBLAST,
	 FX_PLAYER_GIB_ENERGYBEAM,
	 FX_ITEM_BLAST,
	 FX_PLAYER_GENERATOR_BLAST,
	 FX_PLAYER_WEAPON_BLAST,
	 FX_PLAYER_SHIELD_BLAST,
	 FX_PLAYER_FREEZE_EFFECT,
	 FX_PLAYER_FROZENCUBE_BLAST,
	 FX_PLAYER_BURN_EFFECT,
	 FX_PLAYER_SPAWN_RINGTELEPORT,
	 FX_PLAYER_SPAWN_RINGTELEPORT_PART1,
	 FX_PLAYER_SPAWN_RINGTELEPORT_PART2,
	 FX_PLAYER_SPAWN,
	 FX_BLOOD_RED,
	 FX_M203,
	 FX_M203_DETONATE,
	 FX_M203_BLAST,
	 FX_30MMGREN,
	 FX_30MMGREN_DETONATE,
	 FX_30MMGREN_BLAST,
	 FX_METEOR,
	 FX_METEOR_DETONATE,
	 FX_METEOR_BLAST,
	 FX_METEOR_FIRE,
	 FX_METEOR_FIRE_DETONATE,
	 FX_METEOR_FIRE_BLAST,
	 FX_METEOR_FROZEN,
	 FX_METEOR_FROZEN_DETONATE,
	 FX_METEOR_FROZEN_BLAST,
	 FX_GLUON,
	 FX_GLUON_DETONATE,
	 FX_GLUON_BLAST,
	 FX_GLUON_COLLIDE,
	 FX_TRIDENT,
	 FX_TRIDENT_DETONATE,
	 FX_TRIDENT_BLAST,
	 FX_TRIDENT_COLLIDE,
	 FX_SONICWAVE,
	 FX_SONICWAVE_DETONATE,
	 FX_NEEDLE_LASER,
	 FX_NEEDLE_LASER_DETONATE,
	 FX_NEEDLE_LASER_BLAST,
	 FX_SHOCK_LASER,
	 FX_SHOCK_LASER_DETONATE,
	 FX_SHOCK_LASER_BLAST,
	 FX_MULTICANNON,
	 FX_MULTICANNON_DETONATE,
	 FX_MULTICANNON_BLAST,
	 FX_CHARGECANNON,
	 FX_CHARGECANNON_DETONATE,
	 FX_CHARGECANNON_BLAST,
	 FX_HELLHOUNDER,
	 FX_HELLHOUNDER_DETONATE,
	 FX_HELLHOUNDER_BLAST,
	 FX_MINIMISSILE,
	 FX_MINIMISSILE_DETONATE,
	 FX_MINIMISSILE_BLAST,
	 FX_LAVABALL,
	 FX_SHIELDEFFECT,
	 FX_SHIELDEFFECT_INVUL,
	 FX_SHIELDEFFECT_PLASMA,
	 FX_PLAYER_LONGJUMP,
	 FX_FIRE_SUPRESSOR,
	 FX_FIRE_SUPRESSOR_BUBBLES,
	 FX_BIOHAZARDMISSILE,
	 FX_BIOHAZARDMISSILE_DETONATE,
	 FX_BIOHAZARDMISSILE_BLAST,
	 FX_BIOHAZARDMISSILE_SMOKE,
	 FX_BIOHAZARDMISSILE_FINAL_BLAST,
	 FX_HELLFIRE,
	 FX_HELLFIRE_DETONATE,
	 FX_HELLFIRE_BLAST,
	 FX_TELEPORT,
	 FX_TELEPORT_ENTER,
	 FX_TELEPORT_USE,
	 FX_TELEPORT_ENTER_USE,
	 FX_TELEPORT_DETONATE,
	 FX_TELEPORT_BLAST,
	 FX_TELEPORT_ENTER_DETONATE,
	 FX_TELEPORT_COLLIDE,
	 FX_SCORCHER,
	 FX_SCORCHER_DETONATE,
	 FX_SCORCHER_BLAST,
	 FX_LIGHTNINGBALL,
	 FX_LIGHTNINGBALL_DETONATE,
	 FX_LIGHTNINGBALL_BLAST,
	 FX_PULSE,
	 FX_PULSE_DETONATE,
	 FX_PULSE_BLAST,
	 FX_PLASMA,
	 FX_PLASMA_BLAST,
	 FX_PLASMASTORM,
	 FX_PLASMASTORM_DETONATE,
	 FX_PLASMASTORM_BLAST,
	 FX_PLASMASTORM_COLLIDE,
	 FX_PLASMA_SHIELD_CHARGE,
	 FX_PLASMA_SHIELD_CHARGE_DETONATE,
	 FX_PLASMA_SHIELD_CHARGE_BLAST,
	 FX_PROTONMISSILE,
	 FX_PROTONMISSILE_DETONATE,
	 FX_PROTONMISSILE_BLAST,
	 FX_PROTONMISSILE_SHARD_DETONATE,
	 FX_NUCLEARMISSILE,
	 FX_NUCLEARMISSILE_DETONATE,
	 FX_NUCLEARMISSILE_BLAST,
	 FX_NUCLEARMISSILE_RING_DETONATE,
	 FX_ANTIMATHERIALMISSILE,
	 FX_ANTIMATHERIALMISSILE_DETONATE,
	 FX_ANTIMATHERIALMISSILE_BLAST,
	 FX_ANTIMATHERIALMISSILE_BLACKHOLE_DETONATE,
	 FX_SHOCKWAVE_DETONATE,
	 FX_SUNOFGOD,
	 FX_SUNOFGOD_PREPARE_TO_DETONATE,
	 FX_SUNOFGOD_DETONATE,
	 FX_SUNOFGOD_BLAST,
	 FX_FROSTBALL,
	 FX_FROSTBALL_DETONATE,
	 FX_FROSTBALL_BLAST,
	 FX_DEMOLITIONMISSILE,
	 FX_DEMOLITIONMISSILE_DETONATE,
	 FX_DEMOLITIONMISSILE_BLAST,
	 FX_GHOSTMISSILE,
	 FX_GHOSTMISSILE_DETONATE,
	 FX_GHOSTMISSILE_BLAST,
	 FX_MICROMISSILE,
	 FX_MICROMISSILE_DETONATE,
	 FX_MICROMISSILE_BLAST,
	 FX_WARPBALL_EFFECT,
	 FX_RIPPER,
	 FX_RIPPER_DETONATE,
	 FX_RIPPER_HIT,
	 FX_HVRMISSILE,
	 FX_HVRMISSILE_DETONATE,
	 FX_HVRMISSILE_BLAST,
	 FX_DISRUPTOR_MAIN,
	 FX_DISRUPTOR_BABY,
	 FX_DISRUPTOR_DETONATE,
	 FX_DISRUPTOR_BLAST,
	 FX_GUIDED_BOMB,
	 FX_GUIDED_BOMB_DETONATE,
	 FX_GUIDED_BOMB_BLAST,
	 FX_GUIDED_SHARD,
	 FX_GUIDED_SHARD_DETONATE,
	 FX_GUIDED_SHARD_BLAST,
	 FX_ACID_BLOB,
	 FX_ACID_BLOB_DETONATE,
	 FX_ACID_BLOB_TOUCH,
	 FX_BANANA_DETONATE,
	 FX_BANANA_BLAST,
	 FX_TOILET,
	 FX_TOILET_DETONATE,
	 FX_TOILET_BLAST,
	 FX_MORTAR_DETONATE,
	 FX_STR_TARGET_MORTAR,
	 FX_STR_TARGET_SATELLITE,
	 FX_STARBURST_PART1,
	 FX_STARBURST_PART2,
	 FX_STARBURST_DETONATE,
	 FX_DEFAULT_EXP,
	 FX_DEFAULT_EXP_NO_FIREBALL,
	 FX_DEFAULT_EXP_NO_SPARKS,
	 FX_DEFAULT_EXP_NO_SMOKE,
	 FX_BLACKSMOKE,
	 FX_TRIPMINE_DETONATE,
	 FX_SPIDERMINE_DETONATE,
	 FX_SATELLITE_STRIKE,
	 FX_FLASHBANG_DETONATE,
	 FX_FLASHBANG_BLAST,
	 FX_TELEPORT_TARGET_ACTIVATE,
	 FX_ATOMBOMB_DETONATE_PART1,
	 FX_ATOMBOMB_DETONATE_PART2,
	 FX_ATOMBOMB_DETONATE_PART3,
	 FX_ATOMBOMB_DETONATE_PART4,
	 FX_ATOMBOMB_DETONATE_PART5,
	 FX_ATOMBOMB_DETONATE_PART6,
	 FX_ATOMBOMB_DETONATE_PART7,
	 FX_ATOMBOMB_DETONATE_PART8
} fx;

//Spark shower effects, Client-sided ONLY
typedef enum
{
	SPARKSHOWER_SPARKS = 0,
	SPARKSHOWER_SPARKS2,
	SPARKSHOWER_EXP,
	SPARKSHOWER_SPARKSMOKE,
	SPARKSHOWER_STREAKS,
	SPARKSHOWER_FLICKER,
	SPARKSHOWER_SMOKE,
	SPARKSHOWER_FIRESMOKE,
	SPARKSHOWER_FIREEXP,
	SPARKSHOWER_ENERGY,
	SPARKSHOWER_BLOODDRIPS,
	SPARKSHOWER_LAVA_FLAME,
	SPARKSHOWER_BLUEENERGY,
	SPARKSHOWER_GREENENERGY,
	SPARKSHOWER_BLACKSMOKE,
	SPARKSHOWER_GREENSMOKE,
	SPARKSHOWER_LIGHTNING_STRIKE,
	SPARKSHOWER_GREEN_LIGHTNING_STRIKE,
	SPARKSHOWER_LIGHTNING_CHAOS,
} spark_shower;

//Trail effects, Client-sided ONLY
typedef enum
{
	FX_SMOKETRAIL_SMOKE =0,
	FX_SMOKETRAIL_FIRESMOKE,
	FX_SMOKETRAIL_BLOOD,
	FX_SMOKETRAIL_BEAMFOLLOW,
//	FX_SMOKETRAIL_SHOCKLASER,
//	FX_SMOKETRAIL_GLUON,
//	FX_SMOKETRAIL_DISRUPTOR_MAIN,
//	FX_SMOKETRAIL_DISRUPTOR_BABY,
} fx_smoketrail;

//Temp entity trail effects, Client-sided ONLY
typedef enum
{
	TENT_TRAIL_NONE = 0,
	TENT_TRAIL_SMOKE,
	TENT_TRAIL_FIRESMOKE,
	TENT_TRAIL_BLOODTRAIL,
	TENT_TRAIL_SPARKS,
	TENT_TRAIL_SPARKSMOKE,
	TENT_TRAIL_STREAKS,
	TENT_TRAIL_RS_FIRE,
	TENT_TRAIL_RS_FIRE2,
	TENT_TRAIL_RS_BLACKSMOKE,
	TENT_TRAIL_RS_WHITESMOKE,
	TENT_TRAIL_RS_GREENSMOKE,
	TENT_TRAIL_RS_BLUESMOKE,
} tent_trail;

// Different bodyes for explosion effects, Client-Sided ONLY
typedef enum
{
	BLAST_MDL_ERROR	= 0,
	BLAST_MDL_ERROR_LOD,
	BLAST_MDL_EXPLOSION,
	BLAST_MDL_EXPLOSION_LOD,
	BLAST_MDL_EXPLOSION_01,
	BLAST_MDL_EXPLOSION_01_LOD,
	BLAST_MDL_MUSHROOM,
	BLAST_MDL_MUSHROOM_LOD,
	BLAST_MDL_NUKE_MUSHROOM,
	BLAST_MDL_NUKE_MUSHROOM_LOD,
	BLAST_MDL_SPHERE,
	BLAST_MDL_SPHERE_LOD,
	BLAST_MDL_SPHERE_HD,
	BLAST_MDL_SPHERE_HD_LOD,
	BLAST_MDL_LIGHT_CONE,
	BLAST_MDL_LIGHT_CONE_LOD,
	BLAST_MDL_FROZEN_CUBE,
	BLAST_MDL_FROZEN_CUBE_LOD,
	BLAST_MDL_MORTAR_TARGET,
	BLAST_MDL_MORTAR_TARGET_LOD,
	BLAST_MDL_SATELLITE_TARGET,
	BLAST_MDL_SATELLITE_TARGET_LOD,
	BLAST_MDL_SHOCKWAVE,
	BLAST_MDL_SHOCKWAVE_LOD,
	BLAST_MDL_FIRE,
	BLAST_MDL_FIRE_LOD,
	BLAST_MDL_MELTED_PLAYER,
	BLAST_MDL_MELTED_PLAYER_LOD,
	BLAST_MDL_MELTED_PLAYER_01,
	BLAST_MDL_MELTED_PLAYER_01_LOD,
	BLAST_MDL_MELTED_PLAYER_02,
	BLAST_MDL_MELTED_PLAYER_02_LOD,
	BLAST_MDL_MELTED_PLAYER_03,
	BLAST_MDL_MELTED_PLAYER_03_LOD,
} explo_mdl;


typedef enum
{
	LGTNTG_FIELD_LIGHTNINGS = 0,
	LGTNTG_FIELD_LIGHTNINGS_LOD,
	LGTNTG_FIELD_STRIKE,
	LGTNTG_FIELD_STRIKE_LOD,
	LGTNTG_FIELD_BALL,
	LGTNTG_FIELD_BALL_LOD,
	LGTNTG_FIELD_LIGHTNING_BOLT,
	LGTNTG_FIELD_LIGHTNING_BOLT_LOD,
	LGTNTG_FIELD_LIGHTNING_BOLT_STRIKE,
	LGTNTG_FIELD_LIGHTNING_BOLT_STRIKE_LOD,
	LGTNTG_FIELD_LIGHTNING_BLAST,
	LGTNTG_FIELD_LIGHTNING_BLAST_LOD,
} lgtng_field_mdl;


// this used to change skins ONLY for spheres and explosions in fx_explosions.mdl, 
typedef enum
{
	BLAST_SKIN_FIRE = 0,
	BLAST_SKIN_FIRE_SPARKS,
	BLAST_SKIN_FIRE_NUKE,
	BLAST_SKIN_SPHERE_SUNOFGOD,
	BLAST_SKIN_SPHERE_SIELD_INV,
	BLAST_SKIN_SPHERE_SIELD_PLASMA,
	BLAST_SKIN_SPHERE_SHIELD,
} explo_skin;


//=====================================//
//particle sprite-frames settings start//
//=====================================//
//beams_all.spr
typedef enum
{
	 BLAST_SKIN_DISPLACER = 0,
	 BLAST_SKIN_C4,
	 BLAST_SKIN_TELEENTER,
	 BLAST_SKIN_ENERGYBOLT,
	 BLAST_SKIN_GLUON,
	 BLAST_SKIN_FROSTGRENADE,
	 BLAST_SKIN_LIGHTNING,
	 BLAST_SKIN_ENERGYBEAM,
	 BLAST_SKIN_TAUBEAM,
	 BLAST_SKIN_FIREBEAM,
	 BLAST_SKIN_PSPBEAM,
	 BLAST_SKIN_GAUSSBEAM,
	 BLAST_SKIN_SHOCKWAVE,
	 BLAST_SKIN_PLASMA,
	 BLAST_SKIN_STEAM,
	 BLAST_SKIN_PULSE,
	 BLAST_SKIN_WASTEDBEAM,
	 BLAST_SKIN_LASERBEAM,
	 BLAST_SKIN_TRACER,
	 BLAST_SKIN_PHOTONBEAM,
} beams_all;

//particles_white.spr
typedef enum
{
	 PARTICLE_WHITE_0 = 0,
	 PARTICLE_WHITE_1,
	 PARTICLE_WHITE_2,
	 PARTICLE_WHITE_3,
	 PARTICLE_WHITE_4,
	 PARTICLE_WHITE_5,
	 PARTICLE_WHITE_6,
	 PARTICLE_WHITE_7,
	 PARTICLE_WHITE_8,
	 PARTICLE_WHITE_9,
	 PARTICLE_WHITE_10,
	 PARTICLE_WHITE_11,
	 PARTICLE_WHITE_12,
	 PARTICLE_WHITE_13,
	 PARTICLE_WHITE_14,
} part_white;

//particles_black.spr, 13 frames
typedef enum
{
	 PARTICLE_BLACK_0 = 0,
	 PARTICLE_BLACK_1,
	 PARTICLE_BLACK_2,
	 PARTICLE_BLACK_3,
	 PARTICLE_BLACK_4,
	 PARTICLE_BLACK_5,
	 PARTICLE_BLACK_6,
	 PARTICLE_BLACK_7,
	 PARTICLE_BLACK_8,
	 PARTICLE_BLACK_9,
	 PARTICLE_BLACK_10,
	 PARTICLE_BLACK_11,
	 PARTICLE_BLACK_12,
} part_black;

//particles_red.spr, 41 frames
typedef enum
{
	 PARTICLE_RED_0 = 0,
	 PARTICLE_RED_1,
	 PARTICLE_RED_2,
	 PARTICLE_RED_3,
	 PARTICLE_RED_4,
	 PARTICLE_RED_5,
	 PARTICLE_RED_6,
	 PARTICLE_RED_7,
	 PARTICLE_RED_8,
	 PARTICLE_RED_9,
	 PARTICLE_RED_10,
	 PARTICLE_RED_11,
	 PARTICLE_RED_12,
	 PARTICLE_RED_13,
	 PARTICLE_RED_14,
	 PARTICLE_RED_15,
	 PARTICLE_RED_16,
	 PARTICLE_RED_17,
	 PARTICLE_RED_18,
	 PARTICLE_RED_19,
	 PARTICLE_RED_20,
	 PARTICLE_RED_21,
	 PARTICLE_RED_22,
	 PARTICLE_RED_23,
	 PARTICLE_RED_24,
	 PARTICLE_RED_25,
	 PARTICLE_RED_26,
	 PARTICLE_RED_27,
	 PARTICLE_RED_28,
	 PARTICLE_RED_29,
	 PARTICLE_RED_30,
	 PARTICLE_RED_31,
	 PARTICLE_RED_32,
	 PARTICLE_RED_33,
	 PARTICLE_RED_34,
	 PARTICLE_RED_35,
	 PARTICLE_RED_36,
	 PARTICLE_RED_37,
	 PARTICLE_RED_38,
	 PARTICLE_RED_39,
	 PARTICLE_RED_40,
} part_red;

//particles_green.spr, 9 frames
typedef enum
{
	PARTICLE_GREEN_0 = 0,
	PARTICLE_GREEN_1,
	PARTICLE_GREEN_2,
	PARTICLE_GREEN_3,
	PARTICLE_GREEN_4, 
	PARTICLE_GREEN_5,
	PARTICLE_GREEN_6,
	PARTICLE_GREEN_7,
	PARTICLE_GREEN_8,
} part_green;

//particles_blue.spr, 10 frames
typedef enum
{
	PARTICLE_BLUE_0	= 0,
	PARTICLE_BLUE_1,
	PARTICLE_BLUE_2,
	PARTICLE_BLUE_3,
	PARTICLE_BLUE_4,
	PARTICLE_BLUE_5,
	PARTICLE_BLUE_6,
	PARTICLE_BLUE_7,
	PARTICLE_BLUE_8,
	PARTICLE_BLUE_9
} part_blue;

//particles_violet.spr, 5 frames
typedef enum
{
	PARTICLE_VIOLET_0 = 0,
	PARTICLE_VIOLET_1,
	PARTICLE_VIOLET_2,
	PARTICLE_VIOLET_3,
	PARTICLE_VIOLET_4
} part_violet;


//particles_gibs.spr, 40 frames
typedef enum
{
	 PARTICLE_CONCRETE_0 = 0,
	 PARTICLE_CONCRETE_1,
	 PARTICLE_CONCRETE_2,
	 PARTICLE_CONCRETE_3,
	 PARTICLE_CONCRETE_4,
	 PARTICLE_CONCRETE_5,
	 PARTICLE_BRICK_0,
	 PARTICLE_BRICK_1,
	 PARTICLE_BRICK_2,
	 PARTICLE_BRICK_3,
	 PARTICLE_BRICK_4,
	 PARTICLE_BRICK_5,
	 PARTICLE_WOOD_0,
	 PARTICLE_WOOD_1,
	 PARTICLE_WOOD_2,
	 PARTICLE_WOOD_3,
	 PARTICLE_WOOD_4,
	 PARTICLE_WOOD_5,
	 PARTICLE_LEAVES_0,
	 PARTICLE_LEAVES_1,
	 PARTICLE_LEAVES_2,
	 PARTICLE_LEAVES_3,
	 PARTICLE_LEAVES_4,
	 PARTICLE_LEAVES_5,
	 PARTICLE_LEAVES_6,
	 PARTICLE_LEAVES_7,
	 PARTICLE_GRASS_0,
	 PARTICLE_GRASS_1,
	 PARTICLE_GRASS_2,
	 PARTICLE_GRASS_3,
	 PARTICLE_ASPHALT_0,
	 PARTICLE_ASPHALT_1,
	 PARTICLE_ASPHALT_2,
	 PARTICLE_ASPHALT_3,
	 PARTICLE_ASPHALT_4,
	 PARTICLE_ASPHALT_5,
	 PARTICLE_SAND_0,
	 PARTICLE_SAND_1,
	 PARTICLE_SAND_2,
	 PARTICLE_SAND_3,
	 PARTICLE_SAND_4,
	 PARTICLE_SAND_5,
	 PARTICLE_GLASS_0,
	 PARTICLE_GLASS_1,
	 PARTICLE_GLASS_2,
	 PARTICLE_GLASS_3,
	 PARTICLE_GLASS_4,
	 PARTICLE_GLASS_5,
	 PARTICLE_ICE_0,
	 PARTICLE_ICE_1,
	 PARTICLE_ICE_2,
	 PARTICLE_ICE_3,
	 PARTICLE_ICE_4,
	 PARTICLE_ICE_5,
	 PARTICLE_TILE_0,
	 PARTICLE_TILE_1,
	 PARTICLE_TILE_2,
	 PARTICLE_TILE_3,
	 PARTICLE_TILE_4,
	 PARTICLE_TILE_5,
} part_gibs;


//-----------------------------------------------------------------------------
// model bodyes for matherial gibs: ef_gibs.mdl 
//-----------------------------------------------------------------------------
typedef enum
{
	GIB_CONCRETE_01 = 0,
	GIB_CONCRETE_02,
	GIB_CONCRETE_03,
	GIB_CONCRETE_04,
	GIB_CONCRETE_05,
	GIB_CONCRETE_06,
	GIB_CONCRETE_07,
	GIB_CONCRETE_08,
	GIB_WOOD_01,
	GIB_WOOD_02,
	GIB_WOOD_03,	
	GIB_WOOD_04,
	GIB_WOOD_05,
	GIB_WOOD_06,
	GIB_WOOD_07,
	GIB_WOOD_08,
	GIB_WOOD_09,
	GIB_WOOD_10,
	GIB_GLASS_01,
	GIB_GLASS_02,
	GIB_GLASS_03,
	GIB_GLASS_04,
	GIB_GLASS_05,
	GIB_GLASS_06,
	GIB_GLASS_07,
	GIB_GLASS_08,
	GIB_GRATE_01,
	GIB_GRATE_02,
	GIB_GRATE_03,
	GIB_GRATE_04,
	GIB_GRATE_05,
	GIB_GRATE_06,
	GIB_GRATE_07,
	GIB_GRATE_08,
	GIB_VENT_01,
	GIB_VENT_02,
	GIB_VENT_03,
	GIB_VENT_04,
	GIB_VENT_05,
	GIB_VENT_06,
	GIB_VENT_07,
	GIB_VENT_08,
} ef_gib;

typedef enum
{
	SKIN_GIB_BRICK = 0,
	SKIN_GIB_ROCK,
	SKIN_GIB_ASPHALT,
	SKIN_GIB_FLESH,
	SKIN_GIB_CONCRETE,
	SKIN_GIB_TILE,
	SKIN_GIB_SNOW,
	SKIN_GIB_GRASS,
	SKIN_GIB_DIRT,
	SKIN_GIB_SAND,
	SKIN_GIB_SANDSTONE,
	SKIN_GIB_ICE,
	SKIN_GIB_LEAVES,
	SKIN_GIB_WOOD,
	SKIN_GIB_GLASS,
	SKIN_GIB_GRATE,
	SKIN_GIB_METALL,
} ef_gib_skin;

//-----------------------------------------------------------------------------
// model bodyes for player gibs: ef_player_gibs.mdl 
//-----------------------------------------------------------------------------
typedef enum
{
	PLR_GIB_HEAD = 0,
	PLR_GIB_CHEST,
	PLR_GIB_LEG01,
	PLR_GIB_LEG02,
	PLR_GIB_LEG03,
	PLR_GIB_LEG04,
	PLR_GIB_ARM01,
	PLR_GIB_ARM02,
	PLR_GIB_ARM03,
	PLR_GIB_ARM04,
	PLR_GIB_OTHER01,
	PLR_GIB_OTHER02,
	PLR_GIB_OTHER03,
	PLR_GIB_OTHER04,
	PLR_GIB_OTHER05,
	PLR_GIB_OTHER06,
	PLR_GIB_OTHER07,
	PLR_GIB_METALL01,
	PLR_GIB_METALL02,
	PLR_GIB_METALL03,
	PLR_GIB_METALL04,
	PLR_GIB_METALL05,
	PLR_GIB_METALL06,
	PLR_GIB_METALL07,
	PLR_GIB_METALL08,
	PLR_GIB_BOOTS01,
	PLR_GIB_BOOTS02,
	PLR_GIB_BOOTS03,
	PLR_GIB_BOOTS04,
	PLR_GIB_HEAD_TYPE2,
	PLR_GIB_CHEST_TYPE2,
	PLR_GIB_ARM01_TYPE2,
	PLR_GIB_ARM02_TYPE2,
	PLR_GIB_ARM03_TYPE2,
	PLR_GIB_PELVIS,
	PLR_GIB_LEG01_TYPE2,
	PLR_GIB_LEG02_TYPE2,
	PLR_GIB_LEG03_TYPE2,
	PLR_GIB_LEG04_TYPE2,
} plr_gib;

//-----------------------------------------------------------------------------
// different skins for player gibs: ef_player_gibs.mdl 
//-----------------------------------------------------------------------------
typedef enum
{
	SKIN_PLR_GIB_METALL_NORMAL = 0,
	SKIN_PLR_GIB_METALL_RUSTED,
	SKIN_PLR_GIB_METALL_MELTED,
	SKIN_PLR_GIB_METALL_WASTED,
	SKIN_PLR_GIB_METALL_FROZEN,
	SKIN_PLR_GIB_METALL_SMOKED
} plr_gib_skin;

//-----------------------------------------------------------------------------
// model bodyes for gun shells: ef_gun_shells.mdl 
//-----------------------------------------------------------------------------

typedef enum
{
	SHELL_PISTOL_9MM = 0,
	SHELL_PISTOL_8MM,
	SHELL_PISTOL_45ACP,
	SHELL_PISTOL_50AE,
	SHELL_PISTOL_357,
	SHELL_RIFLE_556NATO,
	SHELL_RIFLE_762NATO,
	SHELL_RIFLE_87MM,
	SHELL_RIFLE_762MAGNUM,
	SHELL_RIFLE_127MM,
	SHELL_SHOTGUN_10MM,
	SHELL_SHOTGUN_RED,
	SHELL_SHOTGUN_GREEN,
	SHELL_RIFLE_338MAGNUM,
	SHELL_RIFLE_545,
	SHELL_RIFLE_762,
	SHELL_SHOTGUN_12G,
	SHELL_RIFLE_9MM,
	SHELL_RIFLE_762x54,
	SHELL_RIFLE_14MM,
	SHELL_M203,
	SHELL_M32,
	SHELL_M32_SEC,
	SHELL_FLAREGUN,
	SHELL_FLAKCANNON,
	SHELL_RIFLE_762_LINK,
	SHELL_PISTOL_LOD,
	SHELL_RIFLE_LOD,
	SHELL_RIFLE_BIG_LOD,
	SHELL_SHOTGUN_LOD,
	SHELL_GLAUNCHER_LOD,
} shell_body;


//-----------------------------------------------------------------------------
// model bodyes for gun projectiles: projectiles.mdl 
// don't use *_LOD for body settings!!! 
// client changes current, hipoly body to LOD, if the projectile is far enough
//-----------------------------------------------------------------------------

typedef enum
{
	PROJ_BODY_CHARGECANNON = 0,
	PROJ_BODY_CHARGECANNON_LOD,
	PROJ_BODY_HELLFIRE,
	PROJ_BODY_HELLFIRE_LOD,
	PROJ_BODY_BIO_MISSILE,
	PROJ_BODY_BIO_MISSILE_LOD,
	PROJ_BODY_BIO_MISSILE_BROKEN,
	PROJ_BODY_BIO_MISSILE_BROKEN_LOD,
	PROJ_BODY_M203,
	PROJ_BODY_M203_LOD,
//	PROJ_BODY_SHOCK_GREN, //unused
//	PROJ_BODY_SHOCK_GREN_LOD,
//	PROJ_BODY_BOLT, //unused
//	PROJ_BODY_BOLT_LOD,
//	PROJ_BODY_NAIL, //unused
//	PROJ_BODY_NAIL_LOD,
	PROJ_BODY_DEMOLITION_MISSILE,
	PROJ_BODY_DEMOLITION_MISSILE_LOD,
	PROJ_BODY_30MM_GREN,
	PROJ_BODY_30MM_GREN_LOD,
	PROJ_BODY_NEEDLE_LASER,
	PROJ_BODY_NEEDLE_LASER_LOD,
	PROJ_BODY_SHOCK_LASER,
	PROJ_BODY_SHOCK_LASER_LOD,
	PROJ_BODY_MICRO_MISSILE,
	PROJ_BODY_MICRO_MISSILE_LOD,
//	PROJ_BODY_CLUSTER_GREN,//unused
//	PROJ_BODY_CLUSTER_GREN_LOD,
	PROJ_BODY_PROTON_MISSILE,
	PROJ_BODY_PROTON_MISSILE_LOD,
	PROJ_BODY_MINI_MISSILE,
	PROJ_BODY_MINI_MISSILE_LOD,
	PROJ_BODY_NUKE,
	PROJ_BODY_NUKE_LOD,
//	PROJ_BODY_SHRAPNEL,//unused
//	PROJ_BODY_SHRAPNEL_LOD,
//	PROJ_BODY_FLAKBOMB,//unused
//	PROJ_BODY_FLAKBOMB_LOD,
//	PROJ_BODY_RPG_ROCKET,//unused
//	PROJ_BODY_RPG_ROCKET_LOD,
	PROJ_BODY_HELLHOUNDER,
	PROJ_BODY_HELLHOUNDER_LOD,
	PROJ_BODY_ANTIMATHERIAL,
	PROJ_BODY_ANTIMATHERIAL_LOD,
//	PROJ_BODY_MISSILE01,//unused
//	PROJ_BODY_MISSILE01_LOD,
	PROJ_BODY_MULTICANNON,
	PROJ_BODY_MULTICANNON_LOD,
	PROJ_BODY_SPHERE,
	PROJ_BODY_SPHERE_LOD,
	PROJ_BODY_SONICWAVE,
	PROJ_BODY_SONICWAVE_LOD,
//	PROJ_BODY_BOMB, //used as a projectile, but no weapon yet
//	PROJ_BODY_BOMB_LOD,
	PROJ_BODY_GHOST_MISSILE,
	PROJ_BODY_GHOST_MISSILE_LOD,
	PROJ_BODY_RIPPER,
	PROJ_BODY_RIPPER_LOD,
	PROJ_BODY_HVR_MISSILE,
	PROJ_BODY_HVR_MISSILE_LOD,
	PROJ_BODY_GUIDED_SHARD,
	PROJ_BODY_GUIDED_SHARD_LOD,
	PROJ_BODY_GUIDED_BOMB,
	PROJ_BODY_GUIDED_BOMB_LOD,
//	PROJ_BODY_MISSILE02, //unused
//	PROJ_BODY_MISSILE02_LOD, 
//	PROJ_BODY_GRENADE01, //unused
//	PROJ_BODY_GRENADE01_LOD,
	PROJ_BODY_MORTAR_TARGET,
	PROJ_BODY_MORTAR_TARGET_LOD,
	PROJ_BODY_TELEPORT_TARGET,
	PROJ_BODY_TELEPORT_TARGET_LOD,
//	PROJ_BODY_PARACHUTE, //unused
//	PROJ_BODY_PARACHUTE_LOD,
	PROJ_BODY_BANANA,
	PROJ_BODY_BANANA_LOD,
	PROJ_BODY_PLASMA,
	PROJ_BODY_PLASMA_LOD,
	PROJ_BODY_PULSE,
	PROJ_BODY_PULSE_LOD,
	PROJ_BODY_FROSTBALL,
	PROJ_BODY_FROSTBALL_LOD,
	PROJ_BODY_FLASHBANG,
	PROJ_BODY_FLASHBANG_LOD,
	PROJ_BODY_PLASMA_CHARGE,
	PROJ_BODY_PLASMA_CHARGE_LOD,
} proj_body;


//-----------------------------------------------------------------------------
// model bodyes for items: w_items.mdl 
// *_LOD is set automatically from client side.
// an algorithm is: current model body + 1 (for _LOD submodel)
//-----------------------------------------------------------------------------

typedef enum
{
	ITEM_BODY_WEAPONBOX = 0,
	ITEM_BODY_WEAPONBOX_LOD,
	ITEM_BODY_HEALTHKIT,
	ITEM_BODY_HEALTHKIT_LOD,
	ITEM_BODY_ANTIDOTE,
	ITEM_BODY_ANTIDOTE_LOD,
	ITEM_BODY_SECURITY,
	ITEM_BODY_SECURITY_LOD,
	ITEM_BODY_ARMOR,
	ITEM_BODY_ARMOR_LOD,
	ITEM_BODY_LONGJUMP,
	ITEM_BODY_LONGJUMP_LOD,
	ITEM_BODY_AIRSTRIKE,
	ITEM_BODY_AIRSTRIKE_LOD,
	ITEM_BODY_AIRTANK,
	ITEM_BODY_AIRTANK_LOD,
	ITEM_BODY_HASTE,
	ITEM_BODY_HASTE_LOD,
	ITEM_BODY_RAPIDFIRE,
	ITEM_BODY_RAPIDFIREP_LOD,
	ITEM_BODY_QUADDAMAGE,
	ITEM_BODY_QUADDAMAGE_LOD,
	ITEM_BODY_INVISIBILITY,
	ITEM_BODY_INVISIBILITY_LOD,
	ITEM_BODY_INVULNERABILITY,
	ITEM_BODY_INVULNERABILITY_LOD,
	ITEM_BODY_SHIELD_REGENERATION,
	ITEM_BODY_SHIELD_REGENERATION_LOD,
	ITEM_BODY_SHIELD_AUG,
	ITEM_BODY_SHIELD_AUG_LOD,
	ITEM_BODY_HEALTH_AUG,
	ITEM_BODY_HEALTH_AUG_LOD,
	ITEM_BODY_GENERATOR_AUG,
	ITEM_BODY_GENERATOR_AUG_LOD,
	ITEM_BODY_SUPERWEAPON_AMMO,
	ITEM_BODY_SUPERWEAPON_AMMO_LOD,
	ITEM_BODY_BANANA,
	ITEM_BODY_BANANA_LOD,
	ITEM_BODY_ACCURACY,
	ITEM_BODY_ACCURACY_LOD,
	ITEM_BODY_TRIPMINE,
	ITEM_BODY_TRIPMINE_LOD,
	ITEM_BODY_SPIDERMINE,
	ITEM_BODY_SPIDERMINE_LOD,
	ITEM_BODY_SHIELD_STRENGTH_AUG,
	ITEM_BODY_SHIELD_STRENGTH_AUG_LOD,
	ITEM_BODY_ENERGY_CUBE,
	ITEM_BODY_ENERGY_CUBE_LOD,
	ITEM_BODY_LIGHTNING_FIELD,
	ITEM_BODY_LIGHTNING_FIELD_LOD,
	ITEM_BODY_SATELLITE_STRIKE,
	ITEM_BODY_SATELLITE_STRIKE_LOD,
	ITEM_BODY_FLASHBANG,
	ITEM_BODY_FLASHBANG_LOD,
	ITEM_BODY_RADSHIELD,
	ITEM_BODY_RADSHIELD_LOD,
	ITEM_BODY_FIRE_SUPRESSOR,
	ITEM_BODY_FIRE_SUPRESSOR_LOD,
	ITEM_BODY_PLASMA_SHIELD,
	ITEM_BODY_PLASMA_SHIELD_LOD,
	ITEM_BODY_WEAPON_POWER_AUG,
	ITEM_BODY_WEAPON_POWER_AUG_LOD,
};

//message manager
typedef enum
{
	MSG_NONE = 0,
	MSG_HEALTH,
	MSG_ARMOR,
	MSG_TRAIN,
	MSG_LOGO,
	MSG_ITEM_ACCURACY,
	MSG_ITEM_BANANA,
	MSG_ITEM_INVISIBILITY,
	MSG_ITEM_INVULNERABILITY,
	MSG_ITEM_QUADDAMAGE,
	MSG_ITEM_HASTE,
	MSG_ITEM_RAPIDFIRE,
	MSG_ITEM_SHIELDREGEN,
	MSG_ITEM_ANTIDOTE,
	MSG_ITEM_LIGHTNING_FIELD,
	MSG_ITEM_RADSHIELD,
	MSG_ITEM_SHIELD_STRENGTH,
	MSG_ITEM_FIRE_SUPRESSOR,
	MSG_ITEM_PLASMA_SHIELD,
	MSG_ITEM_WEAPON_POWER,
} msg_manager;